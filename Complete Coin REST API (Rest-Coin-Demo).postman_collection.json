{
	"info": {
		"_postman_id": "6f46d16e-4f08-43c5-9fef-01b6289d8e12",
		"name": "Complete Coin REST API (Rest-Coin-Demo)",
		"description": "A set of API calls to perform CRUD operations on a coins API that uses a Jpa repository to store coin info.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "36987489"
	},
	"item": [
		{
			"name": "coins",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let response = pm.response.json();",
							"",
							"pm.environment.set(\"existing-coin-id\", response[0].id);",
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - id, weight, description, fineness, and metal\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(item) {",
							"        pm.expect(item).to.have.property('id');",
							"        pm.expect(item).to.have.property('weight');",
							"        pm.expect(item).to.have.property('description');",
							"        pm.expect(item).to.have.property('fineness');",
							"        pm.expect(item).to.have.property('metal');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Weight should be a non-negative number\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('array');",
							"  responseData.forEach(function(coin) {",
							"    pm.expect(coin.weight).to.be.at.least(0);",
							"  });",
							"});",
							"",
							"",
							"pm.test(\"Description is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('array');",
							"  responseData.forEach(function(coin) {",
							"    pm.expect(coin.description).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Description should not be empty\");",
							"  });",
							"});",
							"",
							"",
							"pm.test(\"Fineness is a non-negative number\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  responseData.forEach(function(coin) {",
							"    pm.expect(coin.fineness).to.be.a('number');",
							"    pm.expect(coin.fineness).to.be.at.least(0);",
							"  });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}",
					"host": [
						"{{url}}"
					]
				},
				"description": "This endpoint makes an HTTP GET request to the specified URL. The request does not include a request body, as it is a GET request. The response will contain the data requested from the server."
			},
			"response": []
		},
		{
			"name": "coin",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Response status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"})",
							"",
							"pm.test('Response has the required fields', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('weight').that.is.a('number');",
							"    pm.expect(responseData).to.have.property('description').that.is.a('string');",
							"    pm.expect(responseData).to.have.property('fineness').that.is.a('number');",
							"    pm.expect(responseData).to.have.property('metal').that.is.a('string');",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/{{existing-coin-id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"{{existing-coin-id}}"
					]
				},
				"description": "### Get Coin Details\n\nThis endpoint retrieves details for a specific coin identified by the `existing-coin-id`.\n\n#### Request\n\n- Method: `GET`\n    \n- URL: `{{url}}/{{existing-coin-id}}`\n    \n\n#### Response\n\nThe response for this request follows the JSON schema below:\n\n``` json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"coinName\": {\n      \"type\": \"string\",\n      \"description\": \"The name of the coin\"\n    },\n    \"symbol\": {\n      \"type\": \"string\",\n      \"description\": \"The symbol of the coin\"\n    },\n    \"price\": {\n      \"type\": \"number\",\n      \"description\": \"The current price of the coin\"\n    },\n    \"marketCap\": {\n      \"type\": \"number\",\n      \"description\": \"The market capitalization of the coin\"\n    },\n    \"volume\": {\n      \"type\": \"number\",\n      \"description\": \"The trading volume of the coin\"\n    }\n    // ... (other properties)\n  }\n}\n\n ```"
			},
			"response": []
		},
		{
			"name": "coin",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Extracting the id from the response and setting it to the environment variable",
							"pm.environment.set(\"new-coin-id\", pm.response.json().id);",
							"",
							"pm.test('Verify that the status field in the response is a string', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData.status).to.be.a('number');",
							"    console.log(responseData);",
							"})",
							"pm.test('Response status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"})",
							"",
							"pm.test('Response has the required fields', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
							"    pm.expect(responseData.weight).to.exist.and.to.be.a('number');",
							"    pm.expect(responseData.description).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.fineness).to.exist.and.to.be.a('number');",
							"    pm.expect(responseData.metal).to.exist.and.to.be.a('string');",
							"})",
							"",
							"pm.test('Verify that the coin has been created', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData.message).to.be.a('string');",
							"})",
							"",
							"pm.test('Data field is an object and contains itemId of type string', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.weight).to.be.a('number');",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"weight\": \"0\",\n    \"description\": \"2021 Peace Dollar Rose Gold\",\n    \"fineness\": \"0.999\",\n    \"metal\": \"Silver\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}",
					"host": [
						"{{url}}"
					]
				},
				"description": "### Create New Item\n\nThis endpoint allows you to create a new item with the given details.\n\n#### Request Body\n\n- `weight` (string): The weight of the item.\n    \n- `description` (string): The description of the item.\n    \n- `fineness` (string): The fineness of the item.\n    \n- `metal` (string): The type of metal used in the item.\n    \n\n#### Response\n\nThe response for this request follows the JSON schema below:\n\n``` json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"status\": {\n      \"type\": \"string\"\n    },\n    \"message\": {\n      \"type\": \"string\"\n    },\n    \"data\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"itemId\": {\n          \"type\": \"string\"\n        }\n      }\n    }\n  }\n}\n\n ```"
			},
			"response": []
		},
		{
			"name": "coin",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required properties - status and message\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('status').that.is.a('string');",
							"    pm.expect(responseData).to.have.property('message').that.is.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Status property is a string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.status).to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Message is a string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.message).to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Verify that the response Content-Type is 'application/json'\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"weight\": 2.0,\n    \"description\": \"1989 Peace Dollar Rose Gold\",\n    \"fineness\": 0.999,\n    \"metal\": \"Silver\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/{{new-coin-id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"{{new-coin-id}}"
					]
				},
				"description": "### Update Coin Details\n\nThis endpoint is used to update the details of a specific coin identified by its unique ID.\n\n#### Request Body\n\n- `weight` (number): The weight of the coin.\n    \n- `description` (string): A brief description of the coin.\n    \n- `fineness` (number): The fineness of the metal used in the coin.\n    \n- `metal` (string): The type of metal used in the coin.\n    \n\n#### Response\n\nThe response for this request is a JSON object conforming to the following schema:\n\n``` json\n{\n    \"type\": \"object\",\n    \"properties\": {\n        \"status\": {\n            \"type\": \"string\"\n        },\n        \"message\": {\n            \"type\": \"string\"\n        }\n    }\n}\n\n ```\n\nThe `status` property indicates the status of the request, and the `message` property provides additional information about the status."
			},
			"response": []
		},
		{
			"name": "coin",
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{url}}/{{new-coin-id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"{{new-coin-id}}"
					]
				},
				"description": "### Delete Coin\n\nThis endpoint is used to delete a specific coin identified by its unique ID.\n\n#### Request Body\n\nThis endpoint does not require a request body.\n\n#### Response\n\nUpon successful deletion, the response will not contain any content, and the status code will indicate a successful deletion (e.g., 204 No Content).\n\nIf the specified coin ID does not exist, the response will indicate a failure with an appropriate status code and message."
			},
			"response": []
		},
		{
			"name": "swagger-docs",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is text/html\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/html\");",
							"});",
							"",
							"",
							"pm.test(\"Response body is not empty\", function () {",
							"    pm.expect(pm.response.text()).to.not.be.empty;",
							"});",
							"",
							"",
							"pm.test(\"Response body contains expected data\", function () {",
							"    const responseData = pm.response.text();",
							"    ",
							"    pm.expect(responseData).to.include(\"The response will contain the data requested by the GET request.\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is within an acceptable range\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(500);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{swagger-ui}}",
					"host": [
						"{{swagger-ui}}"
					]
				},
				"description": "This endpoint makes an HTTP GET request to the specified URL ({{swagger-ui}}) to retrieve data.\n\n### Request Body\n\nThis request does not require a request body.\n\n### Response Body\n\nThe response will contain the data requested by the GET request."
			},
			"response": []
		}
	]
}